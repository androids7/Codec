#include <stdio.h>
/**
* MD5加密算法 
* unsigned int 0～4294967295 
*/

//	非线性函数
#define F(x, y, z) (((x) & (y)) | ((~x) & (z)))    
#define G(x, y, z) (((x) & (z)) | ((y) & (~z)))
#define H(x, y, z) ((x) ^ (y) ^ (z))
#define I(x, y, z) ((y) ^ ((x) | (~z)))
//	链接变量	 
#define A 0x67452301
#define B 0xefcdab89
#define C 0x98badcfe
#define D 0x10325476

unsigned int temp_a;
unsigned int temp_b;
unsigned int temp_c;
unsigned int temp_d;

/**
* First : 填充字符 
*/
void fill(int* string,int fill_lenght,unsigned int lenght)
{
	string[lenght] = 0x80;	
	int i;
	for(i = 1 ; i < fill_lenght ; i++)
	{
		string[lenght+i] = 0;
	}
	
	int n1 = 0,n2 = 0,n3 = 0,n4 = 0,n5 = 0,n6 = 0,n7 = 0,n8 = 0;
	
	unsigned int  size = lenght*8;
	
	n1 = size & 0xFF;
	n2 = (size >> 8) & 0xFF;
	n3 = (size >> 16) & 0xFF;
	n4 = (size >> 24)  & 0xFF;
	
//	n5 = (size  >> 32) & 0xFF;
//	n6 = (size  >> 40) & 0xFF;
//	n7 = (size  >> 48) & 0xFF;
//	n8 = (size  >> 56) & 0xFF;
	
	unsigned int j = lenght + fill_lenght;
	string[j++] = n1;
	string[j++] = n2;
	string[j++] = n3;
	string[j++] = n4;
	string[j++] = n5;
	string[j++] = n6;
	string[j++] = n7;
	string[j++] = n8;
	
	string[j] = '\0';
	
}

/**
* 计算字符串长度 
*/
long str_lenght(const char* str)
{
	int lenght;
	for(lenght=0;str[lenght] != '\0';lenght++);
	return lenght;
}

/**
* 将字符串拷贝到另一个字符串 
*/ 
void str_join(int *string,const char* old_string)
{
	int i;
	for(i = 0; old_string[i] != '\0'; i++)
	{
		string[i] = old_string[i];
	}
	string[i] = '\0';
}


const char* old_string = "jklmn";

int main()
{
	unsigned int lenght = str_lenght(old_string);
	printf("lenght:%d\n",lenght);
	
	unsigned int remainder = lenght % 64;
	printf("remainder:%d\n",lenght);
	
	int fill_lenght = (remainder < 56 ? 56 : 56 + 64)-remainder;
	printf("fill_lenght:%d\n",fill_lenght);
	
	int fill_string[lenght + fill_lenght + 8+1];
	
	fill(fill_string,fill_lenght,lenght); 
	
	int i;
	for(i = 0; i< lenght + fill_lenght + 8; i++)
	{
		printf("%X,",fill_string[i]);
	} 
	
	
	
}
